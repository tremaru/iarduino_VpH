//	Библиотека для преобразования напряжения с щупа pH-метра в кислотность жидкости.
//  Версия: 1.0.0
//  Последнюю версию библиотеки Вы можете скачать по ссылке: https://iarduino.ru
//  Подробное описание функции бибилиотеки доступно по ссылке: https://wiki.iarduino.ru
//  Библиотека является собственностью интернет магазина iarduino.ru и может свободно использоваться и распространяться!
//  При публикации устройств или скетчей с использованием данной библиотеки, как целиком, так и её частей,
//  в том числе и в некоммерческих целях, просим Вас опубликовать ссылку: http://iarduino.ru
//  Автор библиотеки: Панькин Павел
//  Если у Вас возникли технические вопросы, напишите нам: shop@iarduino.ru

#ifndef iarduino_VpH_h
#define iarduino_VpH_h

#if defined(ARDUINO) && (ARDUINO >= 100)
#include <Arduino.h>
#else
#include <WProgram.h>
#endif

#define VpH_Err_Limit 1														//	Возможное значение функции getErr() - показания pH выходят за пределы 0...14.
#define VpH_Err_jumps 2														//	Возможное значение функции getErr() - показания pH "скачут".
																			//
class iarduino_VpH{															//
	public:																	//
	/**	Пользовательские функции **/										//
		void		setCalibration	(void			);						//	Объявляем  функцию запуска калибровки.										Функцию можно повторно вызвать на стадии ожидания смены жидкости, для принудительного запуска второй стадии калибровки.
		uint8_t		getCalibration	(void			);						//	Объявляем  функцию получения текущей стадии калибровки.						Функция возвращает стадию калибровки: 1 или 2, 0-не выполняется, 3-ожидание смены жидкости, 4-ждём 10 секунд перед началом 2 стадии калибровки.
		bool		getResultCalib	(void			){ return flag_CalOk; }	//	Определяем функцию получения результата последней калибровки.				Функция возвращает флаг результата калибровки: true-успех / false-провал.
		void		setStopCalib    (void			){ mode_Cal=0;        } //  Определяем функцию остановки калибровки.									Функцию можно вызвать на любой стадии калибровки.
		bool		getStability	(void			){ return flag_NorOk; }	//	Определяем функцию получения флага нормализации показаний.					Функция возвращает флаг стабильности показаний pH: true-стабильны / false-меняются.
		float		getDrift		(void			){ return drif_pH;    }	//	Объявляем  функцию получения дрейфа кислотности.							Функция возвращает средний дрейф кислотности за последние 10 секунд.
		void		setDif_V		(float voltage	);						//	Объявляем  функцию указания  дифференциального напряжения на выводах щупа.	Параметры функции: разница потенциала выхода щупа, относительно его входа в Вольтах.
		float		getPH			(void			){ return aver_pH;    }	//	Определяем функцию получения водородного показателя жидкости.				Функция возвращает усреднённую измеренную кислотность жидкости.
		uint8_t		getErr			(void			){ return err;        }	//	Определяем функцию получения ошибок.										Функция возвращает байт, каждый бит которого является флагом ошибки.
	/**	Пользовательские переменные **/										//
		uint16_t	averaging	=	0;										//	Коэффициент усреднения водородного показателя жидкости (0-без усреднений, 1-минимальное усреднение, ... 100-сильное усреднение, ... 2147483648-через день показания дойдут до реальных)
		float		known_PH1	=	4.00f;									//	Кислотность 1 калибровочной жидкости от 0 до 14,000 pH.
		float		known_PH2	=	9.18f;									//	Кислотность 2 калибровочной жидкости от 0 до 14,000 pH.
		float		min_drift	=	0.05f;									//	Дрейф кислотности при котором показания считаются стабильными. Значение можно получить функцией getDrift(), через 5-10 минут измерений.
		float		stand_mVstp	=	59.16f;									//	Эталонная чувствительность щупа (шаг смещения напряжения датчика) мВ/pH. Используется при калибровке, для определения смены калибровочной жидкости и проверки результата калибровки.
		float		mVstp		=	59.16f;									//	Действительная чувствительность щупа (шаг смещения напряжения датчика) мВ/pH. Используется в расчётах и определяется в процессе калибровки.
		float		pHn			=	7.0f;									//	Нейтральная кислотность для датчика  от 0 до 14,000 pH. Используется в расчётах и определяется в процессе калибровки.
	private:																//	
	/**	Внутренние переменные **/											//
		float		pred_pH		=	7.0f;									//	Предыдущая    кислотность жидкости (реальная).
		float		real_pH		=	7.0f;									//	Рассчитанная  кислотность жидкости (реальная).
		float		aver_pH		=	7.0f;									//	Рассчитанная  кислотность жидкости (усреднённая).
		float		drif_pH		=	0.0f;									//	Текущий дрейф кислотности жидкости (используется для определения нормализации).
																			//
		float		aray_pH[20];											//	Массив отобранных показаний кислотности для определения её нормализации.
		uint32_t	time_Nor	=	0;										//	Время последнего отбора кислотности для определения её нормализации.
		uint32_t	time_NorOk	=	0;										//	Время стабилизации показаний кислотности.
		bool		flag_NorOk	=	false;									//	Флаг стабилизации показаний кислотности.
																			//
		float		aray_Cal[2];											//	Массив для хранения значений {ΔV1, ΔV2} используемых при калибровке.
		uint8_t		mode_Cal	=	0;										//	Текущее состояние калибровки. 0-ждём запуск, 1-начинаем 1 стадию калибровки, ...
		uint8_t		coun_Cal	=	0;										//	Счётчик для накапления ΔV при калибровке.
		uint32_t	time_Cal	=	0;										//	Время очередного получения ΔV при калибровке.
		bool		flag_CalOk	=	true;									//	Флаг результата последней калибровки.
																			//
		uint8_t		err			=	0;										//	Байт флагов ошибок.
};

#endif
